{"name":"react-json-tree","version":"0.6.8","description":"React JSON Viewer Component, Extracted from redux-devtools","main":"lib/index.js","scripts":{"clean":"rimraf lib","build":"babel src --out-dir lib","lint":"eslint src test examples","test":"NODE_ENV=test mocha --compilers js:babel-core/register --recursive","test:watch":"NODE_ENV=test mocha --compilers js:babel-core/register --recursive --watch","test:cov":"babel-node ./node_modules/.bin/isparta cover ./node_modules/.bin/_mocha -- --recursive","prepublish":"npm run lint && npm run test && npm run clean && npm run build"},"repository":{"type":"git","url":"git+https://github.com/chibicode/react-json-tree.git"},"keywords":["react","json viewer"],"author":{"name":"Shu Uesugi","email":"shu@chibicode.com","url":"http://github.com/chibicode"},"contributors":[{"name":"Dave Vedder","email":"veddermatic@gmail.com","url":"http://www.eskimospy.com/"},{"name":"Daniele Zannotti","email":"dzannotti@me.com","url":"http://www.github.com/dzannotti"}],"license":"MIT","bugs":{"url":"https://github.com/chibicode/react-json-tree/issues"},"homepage":"https://github.com/chibicode/react-json-tree","devDependencies":{"babel-cli":"^6.3.17","babel-core":"^6.3.17","babel-eslint":"^4.1.6","babel-loader":"^6.2.0","babel-plugin-transform-decorators-legacy":"^1.3.3","babel-plugin-transform-es3-member-expression-literals":"^6.5.0","babel-plugin-transform-es3-property-literals":"^6.5.0","babel-preset-es2015-loose":"^6.1.3","babel-preset-react":"^6.3.13","babel-preset-stage-0":"^6.3.13","eslint":"^0.23","eslint-config-airbnb":"0.0.6","eslint-plugin-react":"^2.3.0","expect":"^1.6.0","isparta":"^3.0.3","mocha":"^2.2.5","rimraf":"^2.3.4"},"peerDependencies":{"react":"^0.14.0 || ^15.0.0-0"},"dependencies":{"babel-plugin-transform-runtime":"^6.5.0","babel-runtime":"^6.3.13","react-mixin":"^1.7.0","react-pure-render":"^1.0.2"},"readme":"# react-json-tree\n\nReact JSON Viewer Component, Extracted from [redux-devtools](https://github.com/gaearon/redux-devtools). Supports [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable) objects, such as [Immutable.js](https://facebook.github.io/immutable-js/).\n\n![](https://img.shields.io/npm/v/react-json-tree.svg)\n\n### Usage\n\n```js\nimport JSONTree from 'react-json-tree'\n// If you're using Immutable.js: `npm i --save immutable`\nimport { Map } from 'immutable'\n\n// Inside a React component:\nconst json = {\n  array: [1, 2, 3],\n  bool: true,\n  object: {\n    foo: 'bar'\n  }\n  immutable: Map({ key: 'value' })\n}\n\n<JSONTree data={ json } />\n```\n\n#### Result:\n\n![](http://cl.ly/image/3f2C2k2t3D0o/screenshot%202015-08-26%20at%2010.24.12%20AM.png)\n\nCheck out [examples](examples) directory for more details.\n\n### Theming\n\nYou can pass a `theme` prop containing [base16](http://chriskempson.github.io/base16) theme data to change the theme. [The example theme data can be found here](https://github.com/gaearon/redux-devtools/tree/75322b15ee7ba03fddf10ac3399881e302848874/src/react/themes).\n\n(The theme data is also used by [redux-devtools](https://github.com/gaearon/redux-devtools), and extracting it to a separate npm package is a TODO).\n\n```js\nconst theme = {\n  scheme: 'monokai',\n  author: 'wimer hazenberg (http://www.monokai.nl)',\n  base00: '#272822',\n  base01: '#383830',\n  base02: '#49483e',\n  base03: '#75715e',\n  base04: '#a59f85',\n  base05: '#f8f8f2',\n  base06: '#f5f4f1',\n  base07: '#f9f8f5',\n  base08: '#f92672',\n  base09: '#fd971f',\n  base0A: '#f4bf75',\n  base0B: '#a6e22e',\n  base0C: '#a1efe4',\n  base0D: '#66d9ef',\n  base0E: '#ae81ff',\n  base0F: '#cc6633'\n};\n\n<div style={{ backgroundColor: theme.base00 }}>\n  <JSONTree data={ data } theme={ theme } />\n</div>\n```\n\n#### Result (Monokai theme, dark background):\n\n![](http://cl.ly/image/330o2L1J3V0h/screenshot%202015-08-26%20at%2010.48.24%20AM.png)\n\n### Customization\n\n#### Customize CSS\n\nYou can pass the following properties to customize styling (all optional):\n\n```js\n<JSONTree getArrowStyle={(type, expanded) => ({})}\n    getItemStringStyle={(type, expanded) => ({})}\n    getListStyle={(type, expanded) => ({})}\n    getLabelStyle={(type, expanded) => ({})}\n    getValueStyle={(type, expanded) => ({})} />\n```\n\nHere `type` is a string representing type of data, `expanded` is a current state for expandable items. Each function returns a style object, which extends corresponding default style.\n\nFor example, if you pass the following function:\n\n```js\nconst getStyle = (type, expanded) =>\n  (expanded ? { textTransform: 'uppercase' } :\n              { textTransform: 'lowercase' });\n```\n\nThen expanded nodes will all be in uppercase:\n\n![](http://cl.ly/image/460Y0P3C453Q/screenshot%202015-10-07%20at%203.38.33%20PM.png)\n\n#### Customize Labels for Arrays, Objects, and Iterables\n\nYou can pass `getItemString` to customize the way arrays, objects, and iterable nodes are displayed (optional).\n\nBy default, it'll be:\n\n```js\n<JSONTree getArrowStyle={(type, data, itemType, itemString)\n  => <span>{itemType} {itemString}</span>}\n```\n\nBut if you pass the following:\n\n```js\nconst getItemString = (type, data, itemType, itemString)\n  => (<span> // {type}</span>);\n```\n\nThen the preview of child elements now look like this:\n\n![](http://cl.ly/image/1J1a0b0T0K3c/screenshot%202015-10-07%20at%203.44.31%20PM.png)\n\n#### Customize Rendering\n\nYou can pass the following properties to customize rendered labels and values:\n\n```js\n<JSONTree\n    labelRenderer={raw => <strong>{raw}</strong>}\n    valueRenderer={raw => <em>{raw}</em>}\n/>\n```\n\nIn this example the label and value will be rendered with `<strong>` and `<em>` wrappers respectively.\n\nFor `labelRenderer`, you can provide a full path - [see this PR](https://github.com/chibicode/react-json-tree/pull/32).\n\n#### More Options\n\n- Add `expandAll` property to expand all nodes.\n- Add `hideRoot={true}` to hide a root node.\n### Credits\n\n- All credits to [Dave Vedder](http://www.eskimospy.com/) ([veddermatic@gmail.com](mailto:veddermatic@gmail.com)), who wrote the original code as [JSONViewer](https://bitbucket.org/davevedder/react-json-viewer/).\n- Extracted from [redux-devtools](https://github.com/gaearon/redux-devtools), which contained ES6 + inline style port of [JSONViewer](https://bitbucket.org/davevedder/react-json-viewer/) by [Daniele Zannotti](http://www.github.com/dzannotti) ([dzannotti@me.com](mailto:dzannotti@me.com))\n- [Iterable support](https://github.com/gaearon/redux-devtools/pull/79) thanks to [Daniel K](https://github.com/FredyC).\n- npm package created by [Shu Uesugi](http://github.com/chibicode) ([shu@chibicode.com](mailto:shu@chibicode.com)) per [this issue](https://github.com/gaearon/redux-devtools/issues/85).\n\n### Similar Libraries\n\n- [react-treeview](https://github.com/chenglou/react-treeview)\n- [react-json-inspector](https://github.com/Lapple/react-json-inspector)\n- [react-object-inspector](https://github.com/xyc/react-object-inspector)\n\n### License\n\nMIT\n","readmeFilename":"README.md","_id":"react-json-tree@0.6.8","_from":"react-json-tree@>=0.6.6 <0.7.0"}