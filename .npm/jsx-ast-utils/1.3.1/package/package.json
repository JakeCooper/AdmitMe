{"name":"jsx-ast-utils","version":"1.3.1","description":"AST utility module for statically analyzing JSX","main":"lib/index.js","scripts":{"build":"rimraf lib && babel src --out-dir lib","prepublish":"npm run lint && npm run test && npm run build","coveralls":"cat ./reports/coverage/lcov.info | coveralls","lint":"eslint  --config .eslintrc .","pretest":"npm run lint","test":"istanbul cover -x '**/lib/**' --dir reports/coverage node_modules/mocha/bin/_mocha tests/**/*.js -- --compilers js:babel-core/register --reporter dot"},"devDependencies":{"acorn-jsx":"^3.0.1","babel-cli":"^6.6.0","babel-core":"^6.6.0","babel-eslint":"^6.0.0","babel-preset-es2015":"^6.6.0","coveralls":"^2.11.8","eslint":"^2.11.1","eslint-config-airbnb-base":"^3.0.1","eslint-plugin-import":"^1.8.1","istanbul":"^1.0.0-alpha.2","mocha":"^2.4.5","rimraf":"^2.5.2"},"engines":{"node":">=0.10.0"},"keywords":["jsx","ast","lint","eslint"],"author":{"name":"Ethan Cohen"},"repository":{"type":"git","url":"git+https://github.com/evcohen/jsx-ast-utils.git"},"license":"MIT","dependencies":{"object-assign":"^4.1.0"},"readme":"<p align=\"center\">\n  <a href=\"https://travis-ci.org/evcohen/jsx-ast-utils\">\n    <img src=\"https://api.travis-ci.org/evcohen/jsx-ast-utils.svg?branch=master\"\n         alt=\"build status\">\n  </a>\n  <a href=\"https://npmjs.org/package/jsx-ast-utils\">\n    <img src=\"https://img.shields.io/npm/v/jsx-ast-utils.svg\"\n         alt=\"npm version\">\n  </a>\n  <a href=\"https://github.com/evcohen/jsx-ast-utils/blob/master/LICENSE.md\">\n    <img src=\"https://img.shields.io/npm/l/jsx-ast-utils.svg\"\n         alt=\"license\">\n  </a>\n  <a href='https://coveralls.io/github/evcohen/jsx-ast-utils?branch=master'>\n    <img src='https://coveralls.io/repos/github/evcohen/jsx-ast-utils/badge.svg?branch=master' alt='Coverage Status' />\n  </a>\n  <a href='https://npmjs.org/package/jsx-ast-utils'>\n    <img src='https://img.shields.io/npm/dt/jsx-ast-utils.svg'\n    alt='Total npm downloads' />\n  </a>\n</p>\n\n# jsx-ast-utils\n\nAST utility module for statically analyzing JSX.\n\n## Installation\n```sh\n$ npm i jsx-ast-utils --save\n```\n\n## Usage\nThis is a utility module to evaluate AST objects for JSX syntax. This can be super useful when writing linting rules for JSX code. It was originally in the code for [eslint-plugin-jsx-a11y](https://github.com/evcohen/eslint-plugin-jsx-a11y), however I thought it could be useful to be extracted and maintained separately so **you** could write new interesting rules to statically analyze JSX.\n\n### ESLint example\n```js\nimport { hasProp } from 'jsx-ast-utils';\n// OR: var hasProp = require('jsx-ast-utils').hasProp;\n// OR: const hasProp = require('jsx-ast-utils/hasProp');\n// OR: import hasProp from 'jsx-ast-utils/hasProp';\n\nmodule.exports = context => ({\n  JSXOpeningElement: node => {\n    const onChange = hasProp(node.attributes, 'onChange');\n\n    if (onChange) {\n      context.report({\n        node,\n        message: `No onChange!`\n      });\n    }\n  }\n});\n```\n\n## API\n### AST Resources\n1. [JSX spec](https://github.com/facebook/jsx/blob/master/AST.md)\n2. [JS spec](https://github.com/estree/estree/blob/master/spec.md)\n\n### hasProp\n```js\nhasProp(props, prop, options);\n```\nReturns boolean indicating whether an prop exists as an attribute on a JSX element node.\n\n#### Props\nObject - The attributes on the visited node. (Usually `node.attributes`).\n#### Prop\nString - A string representation of the prop you want to check for existence.\n#### Options\nObject - An object representing options for existence checking\n  1. `ignoreCase` - automatically set to `true`.\n  2. `spreadStrict` - automatically set to `true`. This means if spread operator exists in\n     props, it will assume the prop you are looking for is not in the spread.\n     Example: `<div {...props} />` looking for specific prop here will return false if `spreadStrict` is `true`.\n\n<hr />\n### hasAnyProp\n```js\nhasAnyProp(props, prop, options);\n```\nReturns a boolean indicating if **any** of props in `prop` argument exist on the node.\n\n#### Props\nObject - The attributes on the visited node. (Usually `node.attributes`).\n#### Prop\nArray<String> - An array of strings representing the props you want to check for existence.\n#### Options\nObject - An object representing options for existence checking\n  1. `ignoreCase` - automatically set to `true`.\n  2. `spreadStrict` - automatically set to `true`. This means if spread operator exists in\n     props, it will assume the prop you are looking for is not in the spread.\n     Example: `<div {...props} />` looking for specific prop here will return false if `spreadStrict` is `true`.\n\n<hr />\n### hasEveryProp\n```js\nhasEveryProp(props, prop, options);\n```\nReturns a boolean indicating if **all** of props in `prop` argument exist on the node.\n\n#### Props\nObject - The attributes on the visited node. (Usually `node.attributes`).\n#### Prop\nArray<String> - An array of strings representing the props you want to check for existence.\n#### Options\nObject - An object representing options for existence checking\n 1. `ignoreCase` - automatically set to `true`.\n 2. `spreadStrict` - automatically set to `true`. This means if spread operator exists in\n    props, it will assume the prop you are looking for is not in the spread.\n    Example: `<div {...props} />` looking for specific prop here will return false if `spreadStrict` is `true`.\n\n<hr />\n### getProp\n```js\ngetProp(props, prop, options);\n```\nReturns the JSXAttribute itself or undefined, indicating the prop is not present on the JSXOpeningElement.\n\n#### Props\nObject - The attributes on the visited node. (Usually `node.attributes`).\n#### Prop\nString - A string representation of the prop you want to check for existence.\n#### Options\nObject - An object representing options for existence checking\n  1. `ignoreCase` - automatically set to `true`.\n\n<hr />\n### elementType\n```js\nelementType(node)\n```\nReturns the tagName associated with a JSXElement.\n\n#### Node\nObject - The visited JSXElement node object.\n\n<hr />\n### getPropValue\n```js\ngetPropValue(prop);\n```\nReturns the value of a given attribute. Different types of attributes have their associated values in different properties on the object.\n\nThis function should return the most *closely* associated value with the intention of the JSX.\n\n#### Prop\nObject - The JSXAttribute collected by AST parser.\n\n<hr />\n### getLiteralPropValue\n```js\ngetLiteralPropValue(prop);\n```\nReturns the value of a given attribute. Different types of attributes have their associated values in different properties on the object.\n\nThis function should return a value only if we can extract a literal value from its attribute (i.e. values that have generic types in JavaScript - strings, numbers, booleans, etc.)\n\n#### Prop\nObject - The JSXAttribute collected by AST parser.\n\n<hr />\n### propName\n```js\npropName(prop);\n```\nReturns the name associated with a JSXAttribute. For example, given `<div foo=\"bar\" />` and the JSXAttribute for `foo`, this will return the string `\"foo\"`.\n\n#### Prop\nObject - The JSXAttribute collected by AST parser.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/evcohen/jsx-ast-utils/issues"},"homepage":"https://github.com/evcohen/jsx-ast-utils#readme","_id":"jsx-ast-utils@1.3.1","_from":"jsx-ast-utils@>=1.0.0 <2.0.0"}