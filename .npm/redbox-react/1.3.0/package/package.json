{"name":"redbox-react","description":"A redbox (rsod) component to display your errors.","main":"lib/index.js","files":["dist","lib","src"],"scripts":{"clean":"rimraf dist lib tmp","build:umd":"webpack src/index.js dist/redbox.js","build:umd:min":"webpack --config webpack.config.prod.js src/index.js dist/redbox.min.js","build:lib":"babel src --out-dir lib","build":"npm run build:umd && npm run build:umd:min && npm run build:lib","prepublish":"npm run clean && npm run build","test":"standard ./src && babel-node ./tests | tap-spec","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"repository":{"type":"git","url":"git+https://github.com/commissure/redbox-react.git"},"author":{"name":"David Pfahler"},"license":"MIT","bugs":{"url":"https://github.com/commissure/redbox-react/issues"},"homepage":"https://github.com/commissure/redbox-react","keywords":["redbox","rsod","react","react-native"],"devDependencies":{"react":"^0.14.0 || ^15.0.0","babel-cli":"^6.9.0","babel-core":"^6.9.0","babel-loader":"^6.2.4","babel-plugin-rewire":"^1.0.0-rc-3","babel-preset-es2015":"^6.3.3","babel-preset-react":"^6.5.0","babel-preset-stage-0":"^6.3.13","react-addons-test-utils":"^15.0.0","rimraf":"^2.5.2","semantic-release":"^4.0.0","standard":"^7.1.1","tap-spec":"^4.0.2","tape":"^4.5.1","webpack":"^1.13.1"},"peerDependencies":{"react":"^0.14.0 || ^15.0.0"},"dependencies":{"error-stack-parser":"^1.3.6","object-assign":"^4.0.1","react-dom":"^0.14.0 || ^15.0.0"},"version":"1.3.0","readme":"# redbox-react\n\n[![Build Status](https://travis-ci.org/commissure/redbox-react.svg?branch=master)](https://travis-ci.org/commissure/redbox-react)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\nThe red box (aka red screen of death) renders an error in this “pretty” format:\n\n<img src=\"http://i.imgur.com/9Jhlibk.png\" alt=\"red screen of death\" width=\"700\" />\n\n## Usage\n\nCatch an error and give it to `redbox-react`. Works great with\n\n- [react-transform-catch-errors]\n  - [Example][react-transform-example]\n  - [react-transform-boilerplate]\n- [react-hot-loader]\n  - :warning: ️ based on `3.0.0-beta.2`! This depends on `ErrorBoundaries` which\n    will likely not land in react! You should probably not use this\n    before 3.0.0 comes out.\n  - [Example][react-hot-loader-example]\n\n[react-transform-catch-errors]: https://github.com/gaearon/react-transform-catch-errors\n[react-transform-example]: https://github.com/commissure/redbox-react/tree/master/examples/react-transform-catch-errors\n[react-transform-boilerplate]: https://github.com/gaearon/react-transform-boilerplate/\n[react-hot-loader]: https://github.com/gaearon/react-hot-loader\n[react-hot-loader-example]: https://github.com/commissure/redbox-react/tree/master/examples/react-hot-loader\n\nor manually:\n\n```javascript\nimport RedBox from 'redbox-react'\n\nconst e = new Error('boom')\nconst box = <RedBox error={e} />\n```\n\nHere is a more useful, full-fleged example:\n\n```javascript\n/* global __DEV__ */\nimport React from 'react'\nimport { render } from 'react-dom'\nimport App from './components/App'\n\nconst root = document.getElementById('root')\n\nif (__DEV__) {\n  const RedBox = require('redbox-react').default\n  try {\n    render(<App />, root)\n  } catch (e) {\n    render(<RedBox error={e} />, root)\n  }\n} else {\n  render(<App />, root)\n}\n```\n\n## What Is This Good For?\n\nAn error that's only in the console is only half the fun. Now you can\nuse all the wasted space where your app would be if it didn’t crash to\ndisplay the error that made it crash.\n\n**Please use this in development only.**\n\n## Will this catch errors for me?\nNo. This is only a UI component for rendering errors and their stack\ntraces. It is intended to be used with with other existing solutions\nthat automate the error catching for you. See the list at the top of\nthis document or take a look at the [examples].\n\n  [examples]: https://github.com/commissure/redbox-react/tree/master/examples\n\n## Optional Props\n\nThe `RedBox` component takes a couple of props that you can use to\ncustomize its behaviour:\n\n### `editorScheme` `[?string]`\nIf a filename in the stack trace is local, the component can create the\nlink to open your editor using this scheme eg: `subl` to create\n`subl://open?url=file:///filename`.\n\n### `useLines` `[boolean=true]`\nLine numbers in the stack trace may be unreliable depending on the\ntype of sourcemaps. You can choose to not display them with this flag.\n\n### `useColumns` `[boolean=true]`\nColumn numbers in the stack trace may be unreliable depending on the\ntype of sourcemaps. You can choose to not display them with this flag.\n\n### `style` `[?object]`\nAllows you to override the styles used when rendering the various parts of the\ncomponent. It will be shallow-merged with the [default styles](./src/style.js).\n\nIf you’re using [react-transform-catch-errors] you can add these\noptions to your `.babelrc` through the [`imports` property][imports].\n\n  [imports]: https://github.com/gaearon/react-transform-catch-errors#installation\n\n## Sourcemaps With Webpack\n\nIf you’re using [Webpack](https://webpack.github.io) you can get\naccurate filenames in the stacktrace by setting the\n`output.devtoolModuleFilenameTemplate` settings to `/[absolute-resource-path]`.\n\nIt's recommended to set the `devtool` setting to `'eval'`.\n","readmeFilename":"README.md","_id":"redbox-react@1.3.0","_from":"redbox-react@1.3.0"}