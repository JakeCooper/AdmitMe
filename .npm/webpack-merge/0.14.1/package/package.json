{"name":"webpack-merge","description":"Variant of merge that's useful for Webpack configuration","author":{"name":"Juho Vepsalainen","email":"bebraw@gmail.com"},"version":"0.14.1","scripts":{"build":"babel src -d lib","watch":"babel src --watch -d lib","test":"mocha ./test","test:lint":"eslint . ---cache","watch:test":"mocha ./test --watch","preversion":"npm run test:lint && npm run build && npm test && git commit --allow-empty -am \"Update lib\""},"main":"lib/index.js","dependencies":{"lodash.find":"^3.2.1","lodash.isequal":"^4.2.0","lodash.isplainobject":"^3.2.0","lodash.merge":"^3.3.2"},"devDependencies":{"babel-cli":"^6.3.17","babel-preset-es2015":"^6.3.13","eslint":"^1.10.3","eslint-config-airbnb":"^2.1.1","git-prepush-hook":"^1.0.1","mocha":"^2.2.5"},"repository":{"type":"git","url":"git+https://github.com/survivejs/webpack-merge.git"},"homepage":"https://github.com/survivejs/webpack-merge","bugs":{"url":"https://github.com/survivejs/webpack-merge/issues"},"keywords":["webpack","merge"],"license":"MIT","pre-push":["test:lint","build","test"],"readme":"[![build status](https://secure.travis-ci.org/survivejs/webpack-merge.png)](http://travis-ci.org/survivejs/webpack-merge)\n# webpack-merge - Merge designed for Webpack\n\n**webpack-merge** provides a `merge` function that concatenates arrays and merges objects. This behavior is particularly useful in configuring webpack. There's also a webpack specific merge variant known as `merge.smart` that's able to take webpack specifics into account (i.e., it can flatten loader definitions).\n\n## API\n\n```javascript\nvar output = merge(object1, object2, object3, ...);\n\n// smarter merging for loaders, see below\nvar output = merge.smart(object1, object2, object3, ...);\n```\n\n> Check out [SurviveJS - Webpack and React](http://survivejs.com/) to dig deeper into the topic.\n\n## Example\n\n**package.json**\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"webpack-dev-server\",\n    \"build\": \"webpack\"\n  },\n  ...\n}\n```\n\n**webpack.config.js**\n\n```javascript\nvar path = require('path');\nvar merge = require('webpack-merge');\n\nvar TARGET = process.env.npm_lifecycle_event;\n\nvar common = {\n  entry: path.join(__dirname, 'app'),\n  ...\n  module: {\n    loaders: [\n      {\n        test: /\\.css$/,\n        loaders: ['style', 'css'],\n      },\n    ],\n  },\n};\n\nif(TARGET === 'start') {\n  module.exports = merge(common, {\n    module: {\n      // loaders will get concatenated!\n      loaders: [\n        {\n          test: /\\.jsx?$/,\n          loader: 'babel?stage=1',\n          include: path.join(ROOT_PATH, 'app'),\n        },\n      ],\n    },\n    ...\n  });\n}\n\nif(TARGET === 'build') {\n  module.exports = merge(common, {\n    ...\n  });\n}\n\n...\n```\n\nNote that you can override existing arrays/objects like this:\n\n```javascript\nvar common = {\n  entry: [APP_PATH, STYLE_PATH]\n  ...\n};\n\nif(TARGET === 'test') {\n  module.exports = merge(common, {\n    entry: [], // empty now\n    ...\n  });\n}\n```\n\n## Smart Merging of Loaders\n\nWebpack-merge tries to be smart about merging loaders when `merge.smart` is used. Loaders with matching tests will be merged into a single loader value.\n\n**Loader string values `loader: 'babel'` override each other.**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'babel'\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'coffee'\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'coffee'\n  }]\n}\n```\n\n**Loader array values `loaders: ['babel']` will be merged, without duplication.**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel']\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['coffee']\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    // prepended because Webpack evaluated these from right to left!\n    // this way you can specialize behavior and build the loader chain\n    loaders: ['coffee', 'babel']\n  }]\n}\n```\n\n**Loader query strings `loaders: ['babel?plugins[]=object-assign']` will be overridden**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel?plugins[]=object-assign']\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel', 'coffee']\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel', 'coffee']\n  }]\n}\n```\n\n**Loader arrays in source values will have loader strings merged into them.**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'babel'\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['coffee']\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    // prepended because Webpack evaluated these from right to left!\n    loaders: ['coffee', 'babel']\n  }]\n}\n```\n\n**Loader strings in source values will always override.**\n\n```javascript\nmerge.smart({\n  loaders: [{\n    test: /\\.js$/,\n    loaders: ['babel']\n  }]\n}, {\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'coffee'\n  }]\n});\n// will become\n{\n  loaders: [{\n    test: /\\.js$/,\n    loader: 'coffee'\n  }]\n}\n```\n\n## Contributors\n\n* [Fernando Montoya](https://github.com/montogeek) - Use separate lodash functions instead of the core package. Faster to install this way.\n* [Jonathan Felchlin](https://github.com/GreenGremlin) - Smart merging for loaders.\n* [David GÃ³mez](https://github.com/davegomez) - Performance and cosmetic improvements.\n* [siready](https://github.com/siready) - Extend `merge.smart` to support `include/exclude`.\n* [C.J. Winslow](https://github.com/Whoaa512) - Make `merge.smart` `include/exclude` to work correctly with `loader`.\n* [Artem Zakharchenko](https://github.com/blackrabbit99) - Fix `merge.smart` duplication so that if `include` exists, it will merge.\n* [Matt Shwery](https://github.com/mshwery) - If `exclude` is the same while using `merge.smart`, merge `loaders`.\n* [Lucretiel](https://github.com/Lucretiel) - Added a more generic test to describe merge behavior better.\n* [Christian Hoffmeister](https://github.com/choffmeister) - Fix `merge.smart` behavior so that it checks against full loader names instead of just the first letter.\n\n## License\n\n*webpack-merge* is available under MIT. See LICENSE for more details.\n","readmeFilename":"README.md","_id":"webpack-merge@0.14.1","_from":"webpack-merge@0.14.1"}