{"name":"react-mixin","version":"1.7.0","description":"![travis](https://travis-ci.org/brigand/react-mixin.svg)","main":"index.js","dependencies":{"object-assign":"^2.0.0","smart-mixin":"^1.2.0"},"devDependencies":{"6to5ify":"^4.0.0","expect.js":"^0.3.1","mocha":"^2.1.0","react":"^0.13.0-beta.1","sinon":"^1.12.2"},"scripts":{"test":"mocha test/*"},"repository":{"type":"git","url":"git+https://github.com/brigand/react-mixin.git"},"keywords":["react","mixin","es6","class","smart-mixin"],"author":{"name":"Frankie Bagnardi","email":"f.bagnardi@gmail.com"},"license":"MIT","bugs":{"url":"https://github.com/brigand/react-mixin/issues"},"homepage":"https://github.com/brigand/react-mixin","readme":"![travis](https://travis-ci.org/brigand/react-mixin.svg)\n\nWant to use ES6/CoffeeScript/TypeScript/{InsertNoun}Script classes, and mixins?\n\nReact doesn't have anything built in for this, but don't worry!  This package implements\nreact's mixin strategy for arbitrary objects.\n\nInstall with one of:\n\n```sh\n# recommended\nnpm install --save react-mixin@1\n\n# will expose window.reactMixin or the reactMixin AMD module\ncurl 'wzrd.in/standalone/react-mixin@1' > vendor/react-mixin.js\n```\n\n\nHere's an example:\n\n```js\nvar reactMixin = require('react-mixin');\nvar someMixin = require('some-mixin');\nclass Foo extends React.Component {\n    render: function(){ return <div /> }    \n}\nreactMixin(Foo.prototype, someMixin);\nreactMixin(Foo.prototype, someOtherMixin);\n```\n\n## Class level behavior\n\nMany of the things that were regular properties in createClass are now static properties of the class.  To have things like getDefaultProps, propTypes, and getInitialState working correctly you need to apply react-mixin a level higher than the prototype: the class itself.\n\n```js\nvar mixin = {\n  getDefaultProps: function(){\n    return {b: 2};\n  }\n};\n\nclass Foo {\n  static defaultProps = {\n    a: 1\n  };\n  render(){\n    console.log(this.props); // {a: 1, b: 2}\n  }\n}\n\nreactMixin.onClass(Foo, mixin);\n```\n\n## But it's at the end of the file!\n\nFor more readability, there is an es7 decorator proposal.  With the latest babel version and the stage config option set to 0 or 1, you can use decorators.\n\n```js\n@reactMixin.decorate(mixin)\nclass Foo {\n  static defa...\n}\n```\n\nThis is a very thin wrapper.\n\n```js\n  reactMixin.decorate = function(mixin) {\n    return function(reactClass) {\n      return reactMixin.onClass(reactClass, mixin);\n    };\n  }\n```\n\n## Differences from createClass\n\n@ndout resolved the differences by adding `reactMixin.onClass`.  If there are any more incompatibilites, **other than autobinding methods which is intentionally omitted**, please create an issue.\n\n---\n\nThat's pretty much it.  You get errors instead of silently overwriting things, like in react,\nwith the exception of things whitelisted in index.js as type MANY, MANY_MERGED (getDefaultProps/getInitialState).\n\nAutobinding is done by React.createClass, and there's no equivilent in ES6 classes.  This also has better performance (I think), but you do lose some convenience.  You can explicitly bind things in the constructor or componentWillMount.  On the main class, the constructor replaces componentWillMount.\n\n```js\nclass Foo extends React.Component {\n    constructor(props){\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    ...\n}\n```\n\n## But... autobinding!\n\nIf you need autobinding because a mixin depends on it, you can bind the needed methods in the constructor, or do something like this (haven't given it much thought, suggestions welcome).\n\n```js\nfunction autobind(methodNames){\n    return {\n        componentWillMount: function(){\n            methodNames.forEach((name) => {\n                this[name] = this[name].bind(this);\n            });\n        }\n    };\n}\n\n@reactMixin.decorate(mixin)\n@reactMixin.decorate(autobind(Object.keys(mixin)))\nclass Foo {\n  ...\n}\n```\n\nLike this but want to use it outside of react?  See [smart-mixin][1] and define your own mixin spec.\n\n## Should I use this?\n\nI can't think of a more elegant solution to mixins in es6 classes.  If someone comes up with one, create an issue\nand I'll link to it here.\n\nIn the future people will likely use [high order components](https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750) instead of mixins, making this library obsolete. \n\nShould you use es6 classes for react components?  Based on the hacks required above, I'd probably avoid it.\nIt's important that react makes it an option, and it's important to be able to use mixins with them, which\nis why this library exists.\n\n`createClass` isn't going anywhere.\n\n[1]: https://github.com/brigand/smart-mixin\n\n","readmeFilename":"README.md","_id":"react-mixin@1.7.0","_from":"react-mixin@>=1.7.0 <2.0.0"}