{"name":"react-transform-catch-errors","version":"1.0.2","description":"React Transform that catches errors inside React components","main":"lib/index.js","files":["lib","src"],"repository":{"type":"git","url":"git+https://github.com/gaearon/react-transform-catch-errors.git"},"author":{"name":"Dan Abramov","email":"dan.abramov@me.com"},"license":"MIT","bugs":{"url":"https://github.com/gaearon/react-transform-catch-errors/issues"},"homepage":"https://github.com/gaearon/react-transform-catch-errors#readme","scripts":{"clean":"rimraf lib","build":"babel src --out-dir lib","prepublish":"npm run clean && npm run build"},"keywords":["react-transform","react","reactjs","errors","rhl","dx"],"devDependencies":{"babel-cli":"^6.3.17","babel-core":"^6.3.21","babel-preset-es2015":"^6.3.3","babel-preset-stage-0":"^6.3.13","rimraf":"^2.4.3"},"readme":"# react-transform-catch-errors\n\n[![react-transform channel on discord](https://img.shields.io/badge/discord-react--transform%40reactiflux-61DAFB.svg?style=flat-square)](http://www.reactiflux.com)\n\nA [React Transform](https://github.com/gaearon/babel-plugin-react-transform) that catches errors inside `render()` function and renders a React component with an error message instead.\n\nIt’s up to you to choose the React component to render an error message. For example, you may use [redbox-react](https://github.com/KeywordBrain/redbox-react) that imitates React Native “red screen of death”.\n\n## Installation\n\nFirst, install the [Babel plugin](https://github.com/gaearon/babel-plugin-react-transform):\n\n```\nnpm install --save-dev babel-plugin-react-transform\n```\n\nThen, install the transform:\n\n```\nnpm install --save-dev react-transform-catch-errors\n```\n\nFinally, install the component for rendering errors, for example:\n\n```js\nnpm install --save-dev redbox-react\n```\n\nYou may also use a custom component instead.\n\nNow edit your `.babelrc` to include `extra.babel-plugin-react-transform`.  \nIt must be an array of the transforms you want to use:\n\n```js\n{\n  \"presets\": [\"es2015\", \"stage-0\"],\n  \"env\": {\n    // only enable it when process.env.NODE_ENV is 'development' or undefined\n    \"development\": {\n      \"plugins\": [[\"react-transform\", {\n        \"transforms\": [{\n          \"transform\": \"react-transform-catch-errors\",\n          // now go the imports!\n          \"imports\": [\n\n            // the first import is your React distribution\n            // (if you use React Native, pass \"react-native\" instead)\n\n            \"react\",\n\n            // the second import is the React component to render error\n            // (it can be a local path too, like \"./src/ErrorReporter\")\n\n            \"redbox-react\"\n\n            // the third import is OPTIONAL!\n            // when specified, its export is used as options to the reporter.\n            // see specific reporter's docs for the options it needs.\n\n            // it will be imported from different files so it either has to be a Node module\n            // or a file that you configure with Webpack/Browserify/SystemJS to resolve correctly.\n            // for example, see https://github.com/gaearon/babel-plugin-react-transform/pull/28#issuecomment-144536185\n\n            // , \"my-reporter-options\"\n          ]\n        }]\n        // note: you can put more transforms into array\n        // this is just one of them!\n      }]]\n    }\n  }\n}\n```\n\n**It is up to you to ensure that the transform is not enabled when you compile the app in production mode.** The easiest way to do this is to put React Transform configuration inside `env.development` in `.babelrc` and ensure you’re calling `babel` with `NODE_ENV=development`. See [babelrc documentation](https://babeljs.io/docs/usage/babelrc/#env-option) for more details about using `env` option.\n\n## License\n\nMIT\n","readmeFilename":"README.md","_id":"react-transform-catch-errors@1.0.2","_from":"react-transform-catch-errors@1.0.2"}