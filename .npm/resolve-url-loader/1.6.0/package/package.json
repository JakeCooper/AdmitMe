{"name":"resolve-url-loader","version":"1.6.0","description":"Webpack loader that resolves relative paths in url() statements based on the original source file","main":"index.js","repository":{"type":"git","url":"git+https://github.com/bholloway/resolve-url-loader.git"},"keywords":["webpack","loader","css","normalize","rewrite","resolve","url","sass","relative","file"],"author":{"name":"bholloway"},"license":"MIT","bugs":{"url":"https://github.com/bholloway/resolve-url-loader/issues"},"homepage":"https://github.com/bholloway/resolve-url-loader","dependencies":{"camelcase":"^1.2.1","convert-source-map":"^1.1.1","loader-utils":"^0.2.11","lodash.defaults":"^3.1.2","rework":"^1.0.1","rework-visit":"^1.0.0","source-map":"^0.1.43","urix":"^0.1.0"},"readme":"# Resolve URL Loader\n\n[![NPM](https://nodei.co/npm/resolve-url-loader.png)](http://github.com/bholloway/resolve-url-loader)\n\nWebpack loader that resolves relative paths in url() statements based on the original source file.\n\nUse in conjunction with the [sass-loader](https://www.npmjs.com/package/sass-loader) and specify your asset `url()` relative to the `.scss` file in question.\n\nThis loader will use the source-map from the SASS compiler to locate the original `.scss` source file and write a more Webpack-friendly path for your asset. The CSS loader can then locate your asset for individual processing.\n\n## Usage\n\nPlain CSS works fine:\n\n``` javascript\nvar css = require('!css!resolve-url!./file.css');\n```\n\nor using [sass-loader](https://github.com/jtangelder/sass-loader):\n\n``` javascript\nvar css = require('!css!resolve-url!sass?sourceMap!./file.scss');\n```\n\nUse in tandem with the [`style-loader`](https://github.com/webpack/style-loader) to compile sass and to add the css rules to your document:\n\n``` javascript\nrequire('!style!css!resolve-url!./file.css');\n```\n\nand\n\n``` javascript\nrequire('!style!css!resolve-url!sass?sourceMap!./file.scss');\n```\n\n### Source maps required\n\nNote that **source maps** must be enabled on any preceding loader. In the above example we use `sass?sourceMap`.\n\nIn some use cases (no preceding transpiler) there will be no incoming source map. Therefore we do not warn if the source-map is missing.\n\nHowever if there is an incomming source-map then it must imply `source` information at each CSS `url()` statement.\n\n### Apply via webpack config\n\nIt is preferable to adjust your `webpack.config` so to avoid having to prefix every `require()` statement:\n\n``` javascript\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test   : /\\.css$/,\n        loaders: ['style', 'css', 'resolve-url']\n      }, {\n        test   : /\\.scss$/,\n        loaders: ['style', 'css', 'resolve-url', 'sass?sourceMap']\n      }\n    ]\n  }\n};\n```\n\n### Options\n\nOptions may be set using [query parameters](https://webpack.github.io/docs/using-loaders.html#query-parameters) or by using [programmatic parameters](https://webpack.github.io/docs/how-to-write-a-loader.html#programmable-objects-as-query-option). Programmatic means the following in your `webpack.config`.\n\n``` javascript\nmodule.exports = {\n   resolveUrlLoader: {\n      ...\n   }\n}\n```\n\nWhere `...` is a hash of any of the following options.\n\n* `absolute` Forces the url() to be resolved to an absolute path. This is considered \n[bad practice](http://webpack.github.io/docs/how-to-write-a-loader.html#should-not-embed-absolute-paths) so only do it if you know what you are doing.\n\n* `sourceMap` Generate a source-map.\n\n* `silent` Do not display warnings on CSS syntax or source-map error.\n\n* `fail` Syntax or source-map errors will result in an error.\n\n* `keepQuery` Keep query string and hash within url. I.e. `url('./MyFont.eot?#iefix')`, `url('./MyFont.svg#oldiosfix')`.\n\n* `root` An optional directory within which search may be performed. Relative paths are permitted. Where omitted `process.cwd()` is used and should be sufficient for most use cases.\n\nNote that query parameters take precedence over programmatic parameters.\n\n## How it works\n\nA [rework](https://github.com/reworkcss/rework) process is run on incoming CSS.\n\nEach `url()` statement that implies an asset triggers a file search using node `fs` operations. The asset should be relative to the original source file that was transpiled. This file is determined by consulting the incomming source-map at the point of the `url()` statement.\n\nUsually the asset is found relative to the original source file. However in some cases there is no immediate match (*cough* bootstrap *cough*) and we so we start searching both deeper and shallower from the starting directory.\n\nShallower paths must be limited to avoid the whole file system from being considered. Progressively shallower paths within the `root` will be considered. Paths featuring a `package.json` or `bower.json` file will not be considered.\n\nIf the asset is not found then the `url()` statement will not be updated with a Webpack module-relative path. However if the `url()` statement has no source-map `source` information the loader will fail.\n\nThe loader will also fail when input source-map `sources` cannot all be resolved relative to some consistent path within `root`.\n","readmeFilename":"readme.md","_id":"resolve-url-loader@1.6.0","_from":"resolve-url-loader@1.6.0"}