{"name":"nak","version":"0.3.3","description":"ack and ag inspired tool written in Node. Designed to be fast.","keywords":["ag","ack","grep","search"],"author":{"name":"Garen J. Torikian","email":"gjtorikian@gmail.com"},"contributors":[{"name":"Kevin Sawicki","email":"kevin@github.com"}],"dependencies":{"isbinaryfile":"2.0.0","simplefunc":"0.0.2","colors":"0.6.2"},"devDependencies":{"uglify-js":"2.3.5","execSync":"0.0.4","mocha":"1.10.0","wrench":"1.5.1","nprof":""},"bin":{"nak":"./bin/nak"},"main":"./lib/nak","engines":{"node":">= 0.8.x"},"repository":{"type":"git","url":"git+ssh://git@github.com/gjtorikian/nak.git"},"scripts":{"test":"mocha tests/test_runner.js"},"readme":"[![Build Status](https://travis-ci.org/gjtorikian/nak.png)](https://travis-ci.org/gjtorikian/nak)\n\nAn `ack`/`ag` clone written in Node.js. The focus here is on speed and performance,\nrather than trying to 100% mimic all the functionality of `ack`.\n\nThere were two goals set out:\n\n1. Be faster than `ack`\n2. Return matches in order\n\nI've benchmarked in numerous places where\nand why code is written as it is, as well as possible areas of improvement. It's\nmostly asynchronous, though due to the requirement of returning items in order,\nperforms a mergesort at the end of all the results obtained.\n\nAs long as it's faster than `ack`, I'm pleased.\n\n# Behavior\n\nA lot of the functionality is modeled around `ag`. In fact, you can provide a _.nakignore_ \nfile to define patterns to ignore. _.nakignore_ files in the directory you're searching \nunder are automatically included as ignore rules, but you can choose to specify any \nadditional file (with _.gitignore_-style rules) with `-a`.\n\nSome missing options include specifying a maxdepth, or following symlinks.\n\n# Usages\n\n## As an executable\n\n`nak -G '*.js' 'function' .`\n\nFind all files ending in `js`, in the current directory, with the phrase `function`.\n\n`nak -a ../.gitignore -i 'def' .`\n\nFind all files in the current directory, with the phrase in `def` (case-insensitive), \nin the current directory; also, use the _.gitignore_ rules from the folder above\n\n`nak -d '*.less' -w 'mixin' .`\n\nFind all files in the current directory that are not `.less`, with the phrase `mixin` \n(whole word), in the current directory\n\n## Within a script\n\n```javascript\nvar nak = require(\"./lib/nak\");\n\noptions = {};\noptions.list = true;\noptions.path = \".\";\n\n// capture stdout to do something with it\nnak.run(options);\n```\n\n## Your own function event handlers - BETA\n\nIf you want, you can define some of your own function handling for certain events, \nand pass them to `nak`.\nAll functions should return `null` upon failing.\n\nCurrently available functions are:\n\n* onFilepathSearchFn(filepath) - Given a `filepath`, this returns a String representing \nthe contents of that file\n\nIf you're using `nak` as part of a Node.js script using `child_process.exec` or \n`child_process.spawn` you **MUST** serialize your function as JSON; `nak` will \ndeserialize it for you. You must also store the function as `process.env.nak_<function_name>`. \nThis is because `process.env` is automatically passed to the `exec` or `spawn` \nfunction. Modifying `process.env` like this only affects the running script, not your machine.\n\nBehind the scenes, serialization occurs via the [simplefunc](https://github.com/ajlopez/SimpleFunc) module.\n\nIn the following examples, when `nak` encounters a filepath called `file1.txt`, \nit'll return \"photo\" as the file's contents. Otherwise, it returns `null`, and \nnormal `nak` behavior is performed--in this case, a disk read of the file.\n\n### Event functions in a script\n\n```javascript\nvar nak = require('nak'),\n    Exec = require('child_process').exec;\n\nvar fn = function(filepath) {\n    if (/file1\\.txt/.test(filepath)) return \"photo\";\n    return null;\n}\n\nprocess.env.nak_onFilepathSearchFn = nak.serialize(fn);\n\nExec(nakPath + \" \" + \"-a .nakignore 'photo' \" + process.cwd(), function(err, stdout, stderr) {\n // ...\n}\n```\n\n### Event function from the command line\n\nThis is ugly, but it works the same as above:\n\n```bash\nnak -a .nakignore 'photo' --onFilepathSearchFn 'if (/file1\\.txt/.test(filepath)) return \"photo\";\\nreturn null;' .\n```\n\n# Why?\n\nAfter reading Felix's [Faster than C](https://github.com/felixge/faster-than-c) notes, \nI became inspired to just write a **fast** `ack` clone, in Node.js.\n\nI benchmarked and rewrote and learned a lot. While `nak` does not support _everything_ \n`ack` does, it does nearly everything `ag` does.\n\n# Benchmarks\n\nYou like numbers? Me too. They're fun.\n\nHere's the average time for grabbing information from a directory with 13,300 files \nfive times. The commands do the exact same thing by just listing all the available \nfiles in the directory structure, _and_ try to exclude the same files/directories.\n\n`ag`     | `nak`    | `ack`    | `find`\n---------|----------|----------|---------\n10.052s  | 4.863s   | 5.217s   | 28.989s\n\nHere are benchmarks for finding the phrase \"va\" in cloud9infra, as a whole-word \nregexp, case insensitively:\n\n`ag`     | `nak`    | `ack`     | `grep`\n---------|----------|-----------|---------\n34.609s  | 29.327s  | 88.883s   | 256.14s\n\nObviously, part of the speed impediment to `ack` or `grep` is the lack of a _simple_ \nway to provide ignore rules.\n\n# Testing\n\nAll tests can be found in _tests_; they use [`mocha`](http://visionmedia.github.com/mocha/) \nto run. To run them:\n\n```\nnpm install mocha -g\nnpm test\n```\n\n# Builds\n\nBuilding is necessary only if you want a minified version of nak, or, a version \nthat works with [VFS-Local](https://github.com/c9/vfs-local).\n\nJust call `node compile.js` from the root directory to generate a build. You'll \nneed to `npm install uglify-js` first.\n\nYou'll get several files: one is nak minifed, and the other is a minified version \nof nak that is suitable for use with VFS. The API and argument consumption for VFS \nlocal is the exact same; just make sure you call `api.execute` within the callback \nfor `vfs.extend`.\n\n# Options\n\n```\nOptions:\n      -l|--list                             list files encountered\n      -H|--hidden                           search hidden files and directories (default off)\n      -c|--color                            adds color to results  (default off)\n      -a|--pathToNakignore «value»          path to an additional nakignore file\n      -q|--literal                          do not parse PATTERN as a regular expression; match it literally\n      -w|--wordRegexp                       only match whole words\n      -i|--ignoreCase                       match case insensitively\n      -G|--fileSearch «value»               comma-separated list of wildcard files to only search on\n      -d|--ignore «value»                   comma-separated list of wildcard files to additionally ignore\n      -f|--follow                           follow symlinks (default off)\n      -U|--addVCSIgnores                    include VCS ignore files (.gitignore); still uses .nakignore\n         --ackmate                          output results in a format parseable by AckMate\n         --onFilepathSearchFn «value»       while searching, executes this function on a matching filepath\n```\n\n# Hotspots\n\nRight now there are two areas of the code that take the longest amount of time:\n\n* determining whether a file is binary or not (calls to `isBinaryFile` in _walkdir.js_)\n* assembling the final output in _finalizer_\n\nEverything else--from ignore rule creation to option parsing--takes an insignificant \namount of time to process.\n\n# MIT License\n\nCopyright (c) 2013 Garen J. Torikian \n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/gjtorikian/nak/issues"},"homepage":"https://github.com/gjtorikian/nak#readme","_id":"nak@0.3.3","_shasum":"fe31c4e1964f3f40eb50e48c2fae384d2ce80b1d","_resolved":"https://github.com/c9/nak/tarball/c9","_from":"https://github.com/c9/nak/tarball/c9"}