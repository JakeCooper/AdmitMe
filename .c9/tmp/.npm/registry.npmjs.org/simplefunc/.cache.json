{"_id":"simplefunc","_rev":"5-98d04e859ce68e22e9c3acb8b90cba65","name":"simplefunc","description":"Simple object with functions encode/decode, serialization/deserialization","dist-tags":{"latest":"0.0.2"},"versions":{"0.0.1":{"name":"simplefunc","description":"Simple object with functions encode/decode, serialization/deserialization","keywords":["mapreduce","algorithm","javascript","distributed"],"version":"0.0.1","author":{"name":"Angel 'Java' Lopez","email":"webmaster@ajlopez.com","url":"http://www.ajlopez.com"},"repository":{"type":"git","url":"git://github.com/ajlopez/SimpleFunc.git"},"main":"./lib/simplefunc.js","engines":{"node":">= 0.6.0 && < 0.9.0"},"scripts":{"test":"node ./test.js"},"dependencies":{},"devDependencies":{},"readme":"# SimpleFunc\r\n\r\nSimple object with functions encode/decode, serialization/deserialization.\r\n\r\n## Installation\r\n\r\nVia npm on Node:\r\n\r\n```\r\nnpm install simplefunc\r\n```\r\n\r\n\r\n## Usage\r\n\r\nSometimes, you need to define an object with attributes and functions, and send it to other machine or process. Functions are\r\nnot serialized, so, an special processing is needed. SimpleFunc is a helper to encode objects with instance funcions so they\r\ncan be serialized/deserializas from/to JSON. You can encode, decode without using JSON, too.\r\n\r\nReference in your program:\r\n```js\r\nvar simplefunc = require('simplefunc');\r\n```\r\n\r\nEncoding a value\r\n```js\r\nvar encoded = simplefunc.encode(value);\r\n```\r\nMost value are encoded as themselves. The current implementation returns an encoded result if the original value is\r\nan object and it has functions. If value is an object with functions, an object is returned, with two properties:\r\n\r\n- `_obj`: with the properties of the original value, that are NOT functions.\r\n- `_fns`: with the properties of the original value that ARE functions, encoding in an array with its parameters and code\r\n\r\nOnly the first level of properties is encoded: no attempt to make a deep encode (maybe in next versions).\r\n\r\nIf the value to encode is a function, an object is returned with an attribute `_fn` with an array containing the original\r\nfunction arguments and code serialized to string.\r\n\r\nEncoding and decoding a value\r\n```js\r\nvar encoded = simplefunc.encode(value);\r\nvar newvalue = simplefunc.decode(encoded);\r\n```\r\n\r\nYou can convert to/from a JSON string:\r\n```js\r\nvar json = simplefunc.toJson(value);\r\nvar newvalue = simplefunc.fromJson(encoded);\r\n```\r\n\r\n## Development\r\n\r\n```\r\ngit clone git://github.com/ajlopez/SimpleFunc.git\r\ncd SimpleFunc\r\nnpm install\r\nnpm test\r\n```\r\n\r\n## Samples\r\n\r\nTBD\r\n\r\n## To do\r\n\r\n- Samples\r\n- Deep processing\r\n\r\n## Contribution\r\n\r\nFeel free to [file issues](https://github.com/ajlopez/SimpleFunc) and submit\r\n[pull requests](https://github.com/ajlopez/SimpleFunc/pulls) � contributions are\r\nwelcome.\r\n\r\nIf you submit a pull request, please be sure to add or update corresponding\r\ntest cases, and ensure that `npm test` continues to pass.\r\n\r\n","readmeFilename":"README.md","_id":"simplefunc@0.0.1","dist":{"shasum":"6338156ed8ad361b43420180899c1788190dce45","tarball":"https://registry.npmjs.org/simplefunc/-/simplefunc-0.0.1.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"ajlopez","email":"webmaster@ajlopez.com"},"maintainers":[{"name":"ajlopez","email":"webmaster@ajlopez.com"}],"directories":{}},"0.0.2":{"name":"simplefunc","description":"Simple object with functions encode/decode, serialization/deserialization","keywords":["serialization","function","json","nodejs"],"version":"0.0.2","author":{"name":"Angel 'Java' Lopez","email":"webmaster@ajlopez.com","url":"http://www.ajlopez.com"},"repository":{"type":"git","url":"git://github.com/ajlopez/SimpleFunc.git"},"main":"./lib/simplefunc.js","engines":{"node":">= 0.6.0 && < 0.9.0"},"scripts":{"test":"node ./test.js"},"dependencies":{},"devDependencies":{},"readme":"# SimpleFunc\r\n\r\nSimple object with functions encode/decode, serialization/deserialization.\r\n\r\n## Installation\r\n\r\nVia npm on Node:\r\n\r\n```\r\nnpm install simplefunc\r\n```\r\n\r\n\r\n## Usage\r\n\r\nSometimes, you need to define an object with attributes and functions, and send it to other machine or process. Functions are\r\nnot serialized, so, an special processing is needed. SimpleFunc is a helper to encode objects with instance funcions so they\r\ncan be serialized/deserializas from/to JSON. You can encode, decode without using JSON, too.\r\n\r\nReference in your program:\r\n```js\r\nvar simplefunc = require('simplefunc');\r\n```\r\n\r\nEncoding a value\r\n```js\r\nvar encoded = simplefunc.encode(value);\r\n```\r\nMost value are encoded as themselves. The current implementation returns an encoded result if the original value is\r\nan object and it has functions. If value is an object with functions, an object is returned, with two properties:\r\n\r\n- `_obj`: with the properties of the original value, that are NOT functions.\r\n- `_fns`: with the properties of the original value that ARE functions, encoding in an array with its parameters and code\r\n\r\nOnly the first level of properties is encoded: no attempt to make a deep encode (maybe in next versions).\r\n\r\nIf the value to encode is a function, an object is returned with an attribute `_fn` with an array containing the original\r\nfunction arguments and code serialized to string.\r\n\r\nEncoding and decoding a value\r\n```js\r\nvar encoded = simplefunc.encode(value);\r\nvar newvalue = simplefunc.decode(encoded);\r\n```\r\n\r\nYou can convert a value to/from a JSON string:\r\n```js\r\nvar json = simplefunc.toJson(value);\r\nvar newvalue = simplefunc.fromJson(encoded);\r\n```\r\n\r\n## Development\r\n\r\n```\r\ngit clone git://github.com/ajlopez/SimpleFunc.git\r\ncd SimpleFunc\r\nnpm install\r\nnpm test\r\n```\r\n\r\n## Samples\r\n\r\nTBD\r\n\r\n## To do\r\n\r\n- Samples\r\n- Deep processing\r\n\r\n## Versions\r\n\r\n- 0.0.1 Published.\r\n- 0.0.2 Published. Fixed null processing.\r\n\r\n## Contribution\r\n\r\nFeel free to [file issues](https://github.com/ajlopez/SimpleFunc) and submit\r\n[pull requests](https://github.com/ajlopez/SimpleFunc/pulls) � contributions are\r\nwelcome.\r\n\r\nIf you submit a pull request, please be sure to add or update corresponding\r\ntest cases, and ensure that `npm test` continues to pass.\r\n\r\n","readmeFilename":"README.md","_id":"simplefunc@0.0.2","dist":{"shasum":"700c9bb52d6521eadeae72d9816d5442aa32e8ef","tarball":"https://registry.npmjs.org/simplefunc/-/simplefunc-0.0.2.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"ajlopez","email":"webmaster@ajlopez.com"},"maintainers":[{"name":"ajlopez","email":"webmaster@ajlopez.com"}],"directories":{}}},"readme":"# SimpleFunc\r\n\r\nSimple object with functions encode/decode, serialization/deserialization.\r\n\r\n## Installation\r\n\r\nVia npm on Node:\r\n\r\n```\r\nnpm install simplefunc\r\n```\r\n\r\n\r\n## Usage\r\n\r\nSometimes, you need to define an object with attributes and functions, and send it to other machine or process. Functions are\r\nnot serialized, so, an special processing is needed. SimpleFunc is a helper to encode objects with instance funcions so they\r\ncan be serialized/deserializas from/to JSON. You can encode, decode without using JSON, too.\r\n\r\nReference in your program:\r\n```js\r\nvar simplefunc = require('simplefunc');\r\n```\r\n\r\nEncoding a value\r\n```js\r\nvar encoded = simplefunc.encode(value);\r\n```\r\nMost value are encoded as themselves. The current implementation returns an encoded result if the original value is\r\nan object and it has functions. If value is an object with functions, an object is returned, with two properties:\r\n\r\n- `_obj`: with the properties of the original value, that are NOT functions.\r\n- `_fns`: with the properties of the original value that ARE functions, encoding in an array with its parameters and code\r\n\r\nOnly the first level of properties is encoded: no attempt to make a deep encode (maybe in next versions).\r\n\r\nIf the value to encode is a function, an object is returned with an attribute `_fn` with an array containing the original\r\nfunction arguments and code serialized to string.\r\n\r\nEncoding and decoding a value\r\n```js\r\nvar encoded = simplefunc.encode(value);\r\nvar newvalue = simplefunc.decode(encoded);\r\n```\r\n\r\nYou can convert to/from a JSON string:\r\n```js\r\nvar json = simplefunc.toJson(value);\r\nvar newvalue = simplefunc.fromJson(encoded);\r\n```\r\n\r\n## Development\r\n\r\n```\r\ngit clone git://github.com/ajlopez/SimpleFunc.git\r\ncd SimpleFunc\r\nnpm install\r\nnpm test\r\n```\r\n\r\n## Samples\r\n\r\nTBD\r\n\r\n## To do\r\n\r\n- Samples\r\n- Deep processing\r\n\r\n## Contribution\r\n\r\nFeel free to [file issues](https://github.com/ajlopez/SimpleFunc) and submit\r\n[pull requests](https://github.com/ajlopez/SimpleFunc/pulls) � contributions are\r\nwelcome.\r\n\r\nIf you submit a pull request, please be sure to add or update corresponding\r\ntest cases, and ensure that `npm test` continues to pass.\r\n\r\n","maintainers":[{"name":"ajlopez","email":"webmaster@ajlopez.com"}],"time":{"modified":"2013-02-16T23:49:41.305Z","created":"2013-01-06T18:18:45.094Z","0.0.1":"2013-01-06T18:18:48.399Z","0.0.2":"2013-02-16T23:49:41.305Z"},"author":{"name":"Angel 'Java' Lopez","email":"webmaster@ajlopez.com","url":"http://www.ajlopez.com"},"repository":{"type":"git","url":"git://github.com/ajlopez/SimpleFunc.git"},"_attachments":{},"_etag":"\"B66AFR7AWQCSPHNYYLT2N5ZRR\""}